type Link {
    id: ID!
    title: String!
    address: String!
    user: User!
}

type Task {
    id: ID!
    title: String!
    content: String!
    creater: User!
    editor: User!
    status: Status!
}

type User {
    id: ID!
    name: String!
    role: Role! 
}

type Query {
    links: [Link!]!
    Task: [Task!]!
}

input NewLink {
    title: String!
    address: String!
}

input NewTask {
    title: String!
    content: String!
}

input RefreshTokenInput{
    token: String!
}

input NewUser {
    username: String!
    password: String!
}

input DeleteTask {
    id: ID!
    createrID: String!
}

input Login {
    username: String!
    password: String!
}

type Mutation {
    createLink(input: NewLink!): Link!
    createTask(input: NewTask!): Task!
    createUser(input: NewUser!): String!
    deleteTask(input: DeleteTask!): String!
    login(input: Login!): String!
    # we'll talk about this in authentication section
    refreshToken(input: RefreshTokenInput!): String!
}

enum Status {
    PENDING
    PROCESSING
    COMPLETE
}

enum Role {
    ADMIN
    OWNER
    EDITOR
}